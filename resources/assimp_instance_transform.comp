#version 460 core
layout(local_size_x = 1, local_size_y = 64, local_size_z = 1) in;

/* data format to be uploaded to compute shader */
struct NodeTransformData {
  vec4 translation;
  vec4 scale;
  vec4 rotation; // this is is a quaternion
};

layout (std430, binding = 0) readonly restrict buffer TransformData {
  NodeTransformData data[];
};

layout (std430, binding = 1) writeonly restrict buffer TRSMatrix {
  mat4 trsMat[];
};

mat4 getTranslationMatrix(uint index) {
  return mat4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    data[index].translation[0], data[index].translation[1], data[index].translation[2], 1.0
  );
}

mat4 getScaleMatrix(uint index) {
  return mat4(
    data[index].scale[0], 0.0, 0.0, 0.0,
    0.0, data[index].scale[1], 0.0, 0.0,
    0.0, 0.0, data[index].scale[2], 0.0,
    0.0, 0.0, 0.0, 1.0
 );
}

mat4 getRotationMatrix(uint index) {
  vec4 q = data[index].rotation;

  /* this is mat3_cast from GLM */
  float qxx = q.x * q.x;
  float qyy = q.y * q.y;
  float qzz = q.z * q.z;
  float qxz = q.x * q.z;
  float qxy = q.x * q.y;
  float qyz = q.y * q.z;
  float qwx = q.w * q.x;
  float qwy = q.w * q.y;
  float qwz = q.w * q.z;

  return mat4(
    1.0 - 2.0 * (qyy + qzz),       2.0 * (qxy + qwz),       2.0 * (qxz - qwy), 0.0,
          2.0 * (qxy - qwz), 1.0 - 2.0 * (qxx + qzz),       2.0 * (qyz + qwx), 0.0,
          2.0 * (qxz + qwy),       2.0 * (qyz - qwx), 1.0 - 2.0 * (qxx + qyy), 0.0,
          0.0,                     0.0,                     0.0,               1.0);
}

void main() {
  uint node = gl_GlobalInvocationID.x;
  uint instance = gl_GlobalInvocationID.y;

  /* X work group size is number of bones */
  uint numberOfBones = gl_NumWorkGroups.x;

  uint index = node + numberOfBones * instance;

  trsMat[index] = getTranslationMatrix(index) * getRotationMatrix(index) * getScaleMatrix(index);
}
